//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BimPlusDemo.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BimPlusDemo.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///    &quot;csg&quot;: {
        ///        &quot;elements&quot;: [{
        ///            &quot;type&quot;: &quot;Path&quot;,
        ///            &quot;rotation&quot;: 0.0,
        ///            &quot;geometry&quot;: [{
        ///                &quot;geoType&quot;: &quot;StartPolygon&quot;,
        ///                &quot;point&quot;: [-200.0, -500.0, 0.0]
        ///            }, {
        ///                &quot;geoType&quot;: &quot;Line&quot;,
        ///                &quot;point&quot;: [-200.0, -500.0, 2500.0]
        ///            }, {
        ///                &quot;geoType&quot;: &quot;Line&quot;,
        ///                &quot;point&quot;: [-400.0, -100.0, 3000.0]
        ///            }],
        ///            &quot;offsetX&quot;: 0.0,
        ///            &quot;offsetY&quot;: 0.0
        ///         [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Contour {
            get {
                return ResourceManager.GetString("Contour", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Csg definition with Crosssection definition by using &apos;OuterContour&apos; and &apos;InnerContour&apos;
        ///all values in [mm].
        /// </summary>
        public static string ContourTooltip {
            get {
                return ResourceManager.GetString("ContourTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///	&quot;parent&quot;: &quot;{{topologyId}}&quot;,
        ///	&quot;type&quot;: &quot;ReinforcingBar&quot;,
        ///	&quot;layerid&quot;: &quot;dd5cc7d0-72fe-46aa-ba62-dcd86729bd2f&quot;,
        ///	&quot;attributes&quot;: {
        ///		&quot;general&quot;: {
        ///			&quot;name&quot;: &quot;MyTestBars&quot;
        ///		},
        ///		&quot;element&quot;: {
        ///			&quot;divisionid&quot;: &quot;{{divisionId}}&quot;,
        ///			&quot;logparentid&quot;: &quot;{{projectId}}&quot;
        ///		},
        ///		&quot;geometry&quot;: {
        ///			&quot;csg&quot;: {
        ///				&quot;elements&quot;: [{
        ///					&quot;type&quot;: &quot;Tube&quot;,
        ///					&quot;radius&quot;: 10,
        ///					&quot;geometry&quot;: [{
        ///						&quot;geoType&quot;: &quot;StartPolygon&quot;,
        ///						&quot;point&quot;: [900.0, 0.0, 0.0]
        ///					}, {
        ///						&quot;geoType&quot;: &quot;Line&quot;,
        ///						&quot;point&quot;: [1000.0 [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Csg {
            get {
                return ResourceManager.GetString("Csg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///    &quot;mesh&quot;: {
        ///        &quot;color&quot;: 526360224,
        ///        &quot;vertices&quot;: [
        ///            0, 0, 0,
        ///            2500, 0, 0,
        ///            2500, -2500, 0,
        ///            5000, -2500, 0,
        ///            5000, 3500, 0,
        ///            0, 3500, 0,
        ///            0, 0, 3250,
        ///            2500, 0, 3250,
        ///            2500, 0, 4000,
        ///            2500, -2500, 4000,
        ///            5000, -2500, 4000,
        ///            5000, 0, 4000,
        ///            5000, 0, 3250,
        ///            5000, 3500, 3250,
        ///            0, 3500, 3250
        ///        ],
        ///        &quot;face [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Mesh {
            get {
                return ResourceManager.GetString("Mesh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Vertices&apos; is a list of nodes[x,y,z] in [mm]
        ///&apos;Faces&apos; is a list of faces
        ///first index is the number of edges
        ///all other values are references to &apos;vertices&apos;.
        ///Color is an unsigned int ARGB value..
        /// </summary>
        public static string MeshTooltip {
            get {
                return ResourceManager.GetString("MeshTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap newIssue {
            get {
                object obj = ResourceManager.GetObject("newIssue", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///    &quot;csg&quot;: {
        ///        &quot;elements&quot;: [{
        ///            &quot;type&quot;: &quot;Path&quot;,
        ///            &quot;crossSection&quot;: &quot;IPE200&quot;,
        ///            &quot;rotation&quot;: 1.5707963267948966,
        ///            &quot;geometry&quot;: [{
        ///                &quot;geoType&quot;: &quot;StartPolygon&quot;,
        ///                &quot;point&quot;: [800.0, 800.0, 0.0]
        ///            }, {
        ///                &quot;geoType&quot;: &quot;Line&quot;,
        ///                &quot;point&quot;: [800.0, 800.0, 2000.0]
        ///            }],
        ///            &quot;offsetX&quot;: 0.0,
        ///            &quot;offsetY&quot;: 0.0
        ///        }],
        ///        &quot;color&quot;: 4284456608
        ///    }
        ///}.
        /// </summary>
        public static string Profile {
            get {
                return ResourceManager.GetString("Profile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to With property &apos;CrossSection&apos; you can refer to our CrossSection Catalog.
        ///&apos;IPE200&apos; shape  is starting at Position of &apos;StartPolygon&apos; and goes to next Points. 
        ///The Profile can be rotated and also eccentricity is assignable.
        ///All values in [mm]
        ///Color is an unsigned int ARGB value..
        /// </summary>
        public static string ProfileTooltip {
            get {
                return ResourceManager.GetString("ProfileTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///    &quot;csg&quot;: {
        ///        &quot;elements&quot;: [{
        ///            &quot;type&quot;: &quot;Tube&quot;,
        ///            &quot;radius&quot;: 10,
        ///            &quot;geometry&quot;: [{
        ///                &quot;geoType&quot;: &quot;StartPolygon&quot;,
        ///                &quot;point&quot;: [450.0, 0.0, 0.0]
        ///            }, {
        ///                &quot;geoType&quot;: &quot;Line&quot;,
        ///                &quot;point&quot;: [600.0, 0.0, 0.0]
        ///            }, {
        ///                &quot;geoType&quot;: &quot;Line&quot;,
        ///                &quot;point&quot;: [0.0, 600.0, 0.0]
        ///            }, {
        ///                &quot;geoType&quot;: &quot;Line&quot;,
        ///                &quot;point&quot;: [-600.0, 0.0, 0.0]
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Stirrup {
            get {
                return ResourceManager.GetString("Stirrup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Csg definition for a tube.
        ///you describe a path by using
        ///a list of koordinates[x,y,z in [mm]]
        ///This path will be extruded by parameter
        ///&apos;radius&apos; to a tube..
        /// </summary>
        public static string StirrupTooltip {
            get {
                return ResourceManager.GetString("StirrupTooltip", resourceCulture);
            }
        }
    }
}
